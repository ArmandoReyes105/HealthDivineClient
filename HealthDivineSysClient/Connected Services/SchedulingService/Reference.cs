//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchedulingService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Appointment", Namespace="http://schemas.datacontract.org/2004/07/HealthDiveneSysServer.Entities")]
    public partial class Appointment : object
    {
        
        private System.DateTime AppointmentDateField;
        
        private System.TimeSpan EndTimeField;
        
        private int IdAppointmentField;
        
        private int IdNutritionistField;
        
        private int IdPatientField;
        
        private System.TimeSpan StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime AppointmentDate
        {
            get
            {
                return this.AppointmentDateField;
            }
            set
            {
                this.AppointmentDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan EndTime
        {
            get
            {
                return this.EndTimeField;
            }
            set
            {
                this.EndTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdAppointment
        {
            get
            {
                return this.IdAppointmentField;
            }
            set
            {
                this.IdAppointmentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdNutritionist
        {
            get
            {
                return this.IdNutritionistField;
            }
            set
            {
                this.IdNutritionistField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdPatient
        {
            get
            {
                return this.IdPatientField;
            }
            set
            {
                this.IdPatientField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan StartTime
        {
            get
            {
                return this.StartTimeField;
            }
            set
            {
                this.StartTimeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SchedulingService.Scheduling")]
    public interface Scheduling
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Scheduling/CreateAppointment", ReplyAction="http://tempuri.org/Scheduling/CreateAppointmentResponse")]
        System.Threading.Tasks.Task<int> CreateAppointmentAsync(SchedulingService.Appointment appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Scheduling/GetAppointmentsByNutritionist", ReplyAction="http://tempuri.org/Scheduling/GetAppointmentsByNutritionistResponse")]
        System.Threading.Tasks.Task<SchedulingService.Appointment[]> GetAppointmentsByNutritionistAsync(int nutritionistId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface SchedulingChannel : SchedulingService.Scheduling, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class SchedulingClient : System.ServiceModel.ClientBase<SchedulingService.Scheduling>, SchedulingService.Scheduling
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SchedulingClient() : 
                base(SchedulingClient.GetDefaultBinding(), SchedulingClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_Scheduling.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SchedulingClient(EndpointConfiguration endpointConfiguration) : 
                base(SchedulingClient.GetBindingForEndpoint(endpointConfiguration), SchedulingClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SchedulingClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SchedulingClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SchedulingClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SchedulingClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SchedulingClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> CreateAppointmentAsync(SchedulingService.Appointment appointment)
        {
            return base.Channel.CreateAppointmentAsync(appointment);
        }
        
        public System.Threading.Tasks.Task<SchedulingService.Appointment[]> GetAppointmentsByNutritionistAsync(int nutritionistId)
        {
            return base.Channel.GetAppointmentsByNutritionistAsync(nutritionistId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_Scheduling))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_Scheduling))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:50933/Services/SchedulingService.svc");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return SchedulingClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_Scheduling);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return SchedulingClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_Scheduling);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_Scheduling,
        }
    }
}
